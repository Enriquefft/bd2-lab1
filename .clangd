---
If:
    PathExclude: [.*\.c, .*\.h]
CompileFlags:
  # Treat code as C++, use C++20 standard, enable all warnings.
  Add:
      - "-Weverything"
      - "-xc++"
      - "-std=c++2b"
      - "-fsanitize=address"
      - "-fsanitize=undefined"
      - "-fsanitize-address-use-after-scope"
      - "-fdiagnostics-show-option"
      # - "-fsanitize=thread" # Not allowed with fsanitize=address
      - "--analyze"
      # Disable unwanted warnings.
      - "-Wno-c++98-compat"
      - "-Wno-c++98-compat-pedantic"
      - "-Wno-zero-as-null-pointer-constant"
      - "-Wno-c++20-compat"

Diagnostics:

  # Tweak Clang-Tidy checks.
  ClangTidy:
    Add: 
      [
      bugprone*
      cert*
      clang-analyzer*
      concurrency*
      cppcoreguidelines*
      google*
      hicpp*
      misc*
      modernize*
      performance* 
      readability*
      -google-objc*
      ]
    Remove: [
        # modernize-use-trailing-return-type,

        # Redundant aliases
        hicpp-avoid-c-arrays,
        cppcoreguidelines-avoid-c-arrays,
        cppcoreguidelines-avoid-magic-numbers,
      ]
    CheckOptions:
      misc-non-private-member-variables-in-classes.IgnorePublicMemberVariables: 1
      readability-identifier-naming.ParameterIgnoredRegexp: ^_.*$
      readability-identifier-naming.PrivateMemberIgnoredRegexp: ^C_.*$
      readability-identifier-naming.VariableCase: lower_case
      readability-identifier-naming.ClassCase: CamelCase
      readability-identifier-naming.ConstantCase: UPPER_CASE
      readability-identifier-naming.FunctionCase: lower_case
      readability-identifier-naming.MethodCase: lower_case
      readability-identifier-naming.ParameterCase: lower_case
      readability-identifier-naming.PrivateMemberPrefix: m_

  UnusedIncludes: Strict

